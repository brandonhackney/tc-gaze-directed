function [varargout] = simpleGLM(timeseries,designmatrix,contrast)
% [betas, residuals, tMap] = simpleGLM(timeseries,designmatrix,(contrast))
% Intended to take a whole-brain timeseries and compute a GLM contrast
% timeseries is an n * m matrix of fMRI values at n timepoints for m voxels
% designmatrix is an n * p matrix of n timepoints for p predictor variables
% contrast is a 1 x p vector of weights on each predictor, incl constant
% contrast can be generated by getContrastVector first
% tMap will return a 1 * m vector of t statistics for each voxel
% betas is a p * m matrix of estimates
% residuals is an n * m matrix of error terms


    betas = (designmatrix' * designmatrix) \ designmatrix' * timeseries;
    residuals = timeseries - designmatrix * betas;
    
    varargout = cell(1,nargout);
    for i = 1:length(varargout)
        switch i
            case 1
                varargout{i} = betas;
            case 2
                varargout{i} = residuals;
            case 3
                % Calculate tMap
                assert(nargin > 2, 'No contrast vector provided! Cannot calculate t-statistics')
                varargout{i} = (contrast * betas) ./ sqrt((std(residuals).^2) .* (contrast / (designmatrix' * designmatrix) * contrast'));

            otherwise
                warning('Too many output arguments. Options are [tMap,betas,residuals]. Extra outputs ignored.')
                break
        end
    end
end